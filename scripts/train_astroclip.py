# import torch
# import torch.nn as nn
# from astroclip.transforms import Permute, Standardize
# from astroclip.augmentations import Roll, AddGaussianNoise, SpectrumNoising
# from torchvision.transforms import (
#     RandomHorizontalFlip,
#     RandomVerticalFlip,
#     RandomRotation,
#     CenterCrop,
#     InterpolationMode,
# )
# from astroclip.utils import load_config, download_desi_dataset
# import os
#
#
# def main():
#     # load the config file
#     config = load_config()
#
#     cache_dir = config['cache_dir']
#     output_dir = config['output_dir']
#
#     if not os.path.exists(cache_dir):
#         raise FileNotFoundError(f'Cache directory {cache_dir} does not exist.')
#
#     if not os.path.exists(output_dir):
#         raise FileNotFoundError(f'Cache directory {output_dir} does not exist.')
#
#     # Load the dataset, if the dataset is not already in the cache dir it'll be downloaded
#     dataset = download_desi_dataset(cache_dir)
#
#     # load the observed spectra standard deviation which is generated by compute_observed_spectra_std_dev.py
#     try:
#         observed_spectra_std_dev = torch.load(
#             f'{output_dir}/observed_spectra_std_dev.pt'
#         )
#     except FileNotFoundError:
#         raise FileNotFoundError(
#             f'Observed spectra standard deviation file not found in {output_dir}. '
#             f'Please run compute_observed_spectra_std_dev.py first.'
#         )
#
#     # Define all the image and spectrum transforms / augmentations
#     image_pre_transforms = nn.Sequential(
#         Permute([0, 3, 1, 2]),  # Change to [batch_size, channel, npix, npix]
#     )
#
#     image_augmentations = nn.Sequential(
#         Roll(0, 5),  # Original paper Rolls by [-5, 5] with uniform distribution
#         AddGaussianNoise(0, 0.03),
#         RandomRotation(45, interpolation=InterpolationMode.BILINEAR),
#         RandomHorizontalFlip(),
#         RandomVerticalFlip(),
#     )
#
#     image_post_transforms = nn.Sequential(
#         CenterCrop(96),
#     )
#
#     spectrum_pre_transforms = nn.Sequential(
#         Permute([0, 2, 1]),  # Change to [batch_size, channel, spectrum_length]
#         Standardize(),
#     )
#
#     spectrum_augmentations = nn.Sequential(
#         SpectrumNoising(observed_spectra_std_dev),
#     )
#
#
# if __name__ == '__main__':
#     main()
